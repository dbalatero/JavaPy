interface Range extends Iterable<Integer>:
	@Override
	PrimitiveIterator.OfInt iterator()
	boolean contains(int x)
	
	static Range of(int start, int end):
		if start == end:
			return EmptyRange.INSTANCE
		else if start == end+1 || start+1 == end:
			return new SingletonRange(start, end)
		else if start < end:
			return new ForwardRange(start, end)
		else:
			return new BackwardRange(start, end)
			
	static Range of(int value):
		return new SingletonRange(value)
		
	static Range empty():
		return EmptyRange.INSTANCE
		
	static Range of():
		return EmptyRange.INSTANCE
			
class SingletonRange implements Range:
	private final int value
	
	public SingletonRange(int value):
		this.value = value
		
	@Override
	public boolean contains(int x):
		return x == value
		
	@Override
	public PrimitiveIterator.OfInt iterator():
		return new PrimitiveIterator.OfInt() {
			private boolean hasNext = true
			
			@Override
			public boolean hasNext():
				return hasNext
				
			@Override
			public int nextInt():
				if hasNext:
					hasNext = false
					return value
				else:
					throw new NoSuchElementException()
					
		}
		
	@Override
	public int hashCode():
		return value
		
	@Override
	public String toString():
		return String.format("[%d,%1$d]", value)
		
	@Override
	public boolean equals(Object obj):
		if obj == this:
			return true
		else if obj instanceof SingletonRange:
			return value == ((SingletonRange)obj).value
		else:
			return false
	
class ForwardRange implements Range:
	private final int start, end
	private final int hashCode
	
	public ForwardRange(int start, int end):
		if start > end:
			throw new IllegalArgumentException("start cannot be greater than end")
		this.start = start
		this.end = end
		this.hashCode = Arrays.hashCode(new int[] {start, end})
		
	@Override
	public PrimitiveIterator.OfInt iterator():
		return new PrimitiveIterator.OfInt() {
			private int index = start
			
			@Override
			public boolean hasNext():
				return index < end
				
			@Override
			public int nextInt():
				if index >= end:
					throw new NoSuchElementException()
				return index++
				
		}
	
	@Override
	public boolean contains(int x):
		return x >= start && x < end
		
	@Override
	public int hashCode():
		return hashCode
		
	@Override
	public String toString():
		return String.format("[%d,%d)", start, end)
		
	@Override
	public boolean equals(Object obj):
		if obj == this:
			return true
		else if obj instanceof ForwardRange:
			var range = (ForwardRange)obj
			return start == range.start && end == range.end
		else:
			return false
			
class BackwardRange implements Range:
	private final int start, end
	private final int hashCode
	
	public ForwardRange(int start, int end):
		if start < end:
			throw new IllegalArgumentException("start cannot be greater than end")
		this.start = start
		this.end = end
		this.hashCode = Arrays.hashCode(new int[] {start, end})
		
	@Override
	public PrimitiveIterator.OfInt iterator():
		return new PrimitiveIterator.OfInt() {
			private int index = start
			
			@Override
			public boolean hasNext():
				return index > end
				
			@Override
			public int nextInt():
				if index <= end:
					throw new NoSuchElementException()
				return index--
				
		}
	
	@Override
	public boolean contains(int x):
		return x >= start && x < end
		
	@Override
	public int hashCode():
		return hashCode
		
	@Override
	public String toString():
		return String.format("[%d,%d)", start, end)
		
	@Override
	public boolean equals(Object obj):
		if obj == this:
			return true
		else if obj instanceof BackwardRange:
			var range = (BackwardRange)obj
			return start == range.start && end == range.end
		else:
			return false
			
class EmptyRange implements Range:
	public static final EmptyRange INSTANCE = new EmptyRange()

	private EmptyRange():;
	
	@Override
	public boolean contains(int x):
		return false
		
	@Override
	public PrimitiveIterator.OfInt iterator():
		return new PrimitiveIterator.OfInt() {
			@Override
			public boolean hasNext():
				return false
				
			@Override
			public int nextInt():
				throw new NoSuchElementException()
				
		}
		
	@Override
	public int hashCode():
		return 1
		
	@Override
	public boolean equals(Object obj):
		return this == obj || obj instanceof EmptyRange
		
	@Override
	public String toString():
		return "()"